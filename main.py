import json
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = "YOUR_BOT_API_TOKEN"  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–Ω–∫–æ–≤
BANK_MAPPING = {
    "–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫": "–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫",
    "–í–¢–ë": "–í–¢–ë",
    "–†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫": "–†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫",
    "–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫": "–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫",
    "–¢–∏–Ω—å–∫–æ—Ñ—Ñ": "–¢–∏–Ω—å–∫–æ—Ñ—Ñ"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ—Ä–æ–¥–æ–≤ (ID –∏–∑ API HeadHunter)
CITIES = {
    "–í–µ–ª–∏–∫–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥": 67,
    "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥": 41,
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": 2,
    "–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫": 14,
    "–í–æ–ª–æ–≥–¥–∞": 25,
    "–ü—Å–∫–æ–≤": 75,
    "–ö–æ–º–∏": 1041,
    "–ö–∞—Ä–µ–ª–∏—è": 1077,
    "–õ–µ–Ω. –æ–±–ª.": 145,
    "–ú—É—Ä–º–∞–Ω—Å–∫": 64
}

# –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
POSITIONS = {
    "–ú–µ–Ω–µ–¥–∂–µ—Ä": "–ú–µ–Ω–µ–¥–∂–µ—Ä",
    "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å": "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å",
    "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
    "–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å": "–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å",
    "–õ—é–±–∞—è": "–õ—é–±–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å"
}

# –°–∏–Ω–æ–Ω–∏–º—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
POSITION_SYNONYMS = {
    "–ú–µ–Ω–µ–¥–∂–µ—Ä": [
        "–º–µ–Ω–µ–¥–∂–µ—Ä", "manager", "–º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ", "–º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞",
        "–º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞", "–º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º", "product manager", "project manager"
    ],
    "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å": [
        "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", "head", "chief", "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞", "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
        "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞", "team lead"
    ],
    "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç": [
        "—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "specialist", "—ç–∫—Å–ø–µ—Ä—Ç", "–≤–µ–¥—É—â–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "—Å—Ç–∞—Ä—à–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
        "–≥–ª–∞–≤–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "analyst"
    ],
    "–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å": [
        "–∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å", "–∑–∞–º.", "deputy", "–∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è", "–∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞",
        "–∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞", "–∑–∞–º. —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"
    ]
}

DEFAULT_CITY = "–í–µ–ª–∏–∫–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥"
DEFAULT_CITY_ID = CITIES[DEFAULT_CITY]

# –ë–µ–Ω—á–º–∞—Ä–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –°–±–µ—Ä–æ–º
SBER_BENCHMARK = {
    "salary_avg": 120000,
    "benefits": ["–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞", "–æ–±—É—á–µ–Ω–∏–µ", "–î–ú–°"],
    "tech_stack": ["Python", "SQL", "Kafka"]
}

# –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ò–º–ø–æ—Ä—Ç—ã –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è SBER_BENCHMARK
from parsers.hh_parser import get_hh_vacancies
from analytics import analyze_vacancy


def generate_report(vacancies: list, bank_name: str, city: str, position: str = None) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞ –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
    if not vacancies:
        position_text = f" –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ '{position}'" if position and position != "–õ—é–±–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å" else ""
        return (f"üòï –í {city} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è {bank_name}{position_text}\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å/–≥–æ—Ä–æ–¥")
    report = [f"üìä –û—Ç—á–µ—Ç –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º {bank_name} ({city})"]
    if position and position != "–õ—é–±–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å":
        report.append(f"–ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ '{position}':\n")
    else:
        report.append(":\n")
    for i, vacancy in enumerate(vacancies[:5], 1):
        try:
            analyzed = analyze_vacancy(vacancy, SBER_BENCHMARK)
            salary = format_salary(vacancy.get('salary'))
            salary_comparison = ""
            if vacancy.get('salary') and vacancy['salary'].get('from'):
                salary_diff = vacancy['salary']['from'] - SBER_BENCHMARK['salary_avg']
                if salary_diff > 0:
                    salary_comparison = "(üî∫ –≤—ã—à–µ)"
                elif salary_diff < 0:
                    salary_comparison = "(üîª –Ω–∏–∂–µ)"
                else:
                    salary_comparison = "(‚âà –∫–∞–∫ –≤ –°–±–µ—Ä–µ)"

            report.append(
                f"\n{i}. üè¶ {analyzed.get('–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞', vacancy.get('employer', {}).get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))}"
                f"\n   üìå –î–æ–ª–∂–Ω–æ—Å—Ç—å: {vacancy.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"
                f"\n   üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {salary} {salary_comparison}"
                f"\n   ‚úîÔ∏è –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: {analyzed.get('–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"
                f"\n   üéÅ –°–æ—Ü–ø–∞–∫–µ—Ç: {analyzed.get('–°–æ—Ü–ø–∞–∫–µ—Ç', '—Å–º. –≤ —É—Å–ª–æ–≤–∏—è—Ö')}"
                f"\n   üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å: {analyzed.get('–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å', '–°—Ä–µ–¥–Ω—è—è')}"
                f"\n   üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –°–±–µ—Ä–æ–º: {analyzed.get('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –°–±–µ—Ä–æ–º', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"
                f"\n   üîó –°—Å—ã–ª–∫–∞: {vacancy.get('alternate_url', '–Ω–µ—Ç')}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–∏: {e}")
            continue
    return "\n".join(report)


def format_salary(salary: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—Ä–ø–ª–∞—Ç–µ"""
    if not salary:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    from_s = f"–æ—Ç {salary['from']}" if salary.get('from') else ""
    to_s = f"–¥–æ {salary['to']}" if salary.get('to') else ""
    currency = salary.get('currency', '').upper()
    return f"{from_s} {to_s} {currency}".strip()


def get_main_keyboard() -> ReplyKeyboardMarkup:
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –±–∞–Ω–∫–∞–º–∏"""
    builder = ReplyKeyboardBuilder()
    buttons = [
        "üè¶ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫",
        "üèõ –í–¢–ë",
        "üåæ –†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫",
        "‚õΩ –ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫",
        "üí≥ –¢–∏–Ω—å–∫–æ—Ñ—Ñ",
        "üåÜ –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥",
        "üíº –í—ã–±—Ä–∞—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å"
    ]
    for text in buttons:
        builder.add(KeyboardButton(text=text))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)


def get_city_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞"""
    builder = ReplyKeyboardBuilder()
    for city in CITIES.keys():
        builder.add(KeyboardButton(text=city))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)


def get_position_keyboard() -> InlineKeyboardMarkup:
    """–ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
    builder = InlineKeyboardBuilder()
    for position in POSITIONS.values():
        builder.add(InlineKeyboardButton(
            text=position,
            callback_data=f"position_{position}")
        )
    builder.adjust(2)
    return builder.as_markup()


@dp.message(Command("start"))
async def start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    user_data[user_id] = {"city": DEFAULT_CITY, "position": "–õ—é–±–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å"}
    await message.answer(
        f"üåÜ –¢–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥: {DEFAULT_CITY}\n"
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–π:",
        reply_markup=get_main_keyboard()
    )


@dp.message(F.text == "üåÜ –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥")
async def change_city(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –≥–æ—Ä–æ–¥–∞"""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
        reply_markup=get_city_keyboard()
    )


@dp.message(F.text == "üíº –í—ã–±—Ä–∞—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å")
async def select_position(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å:",
        reply_markup=get_position_keyboard()
    )


@dp.callback_query(F.data.startswith("position_"))
async def process_position(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
    user_id = callback.from_user.id
    position = callback.data.split("_")[1]
    if user_id not in user_data:
        user_data[user_id] = {}
    user_data[user_id]["position"] = position
    await callback.message.answer(
        f"üíº –í—ã–±—Ä–∞–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {position}\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()


@dp.message(F.text.in_(CITIES.keys()))
async def set_city(message: types.Message):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    user_id = message.from_user.id
    city = message.text
    user_data[user_id] = user_data.get(user_id, {})
    user_data[user_id]["city"] = city
    await message.answer(
        f"üåÜ –ì–æ—Ä–æ–¥ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {city}\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=get_main_keyboard()
    )


@dp.message(F.text.in_(["üè¶ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫", "üèõ –í–¢–ë", "üåæ –†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫", "‚õΩ –ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫", "üí≥ –¢–∏–Ω—å–∫–æ—Ñ—Ñ"]))
async def handle_bank_button(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –±–∞–Ω–∫–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º"""
    bank_mapping = {
        "üè¶ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫": "–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫",
        "üèõ –í–¢–ë": "–í–¢–ë",
        "üåæ –†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫": "–†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫",
        "‚õΩ –ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫": "–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫",
        "üí≥ –¢–∏–Ω—å–∫–æ—Ñ—Ñ": "–¢–∏–Ω—å–∫–æ—Ñ—Ñ"
    }
    user_id = message.from_user.id
    city = user_data.get(user_id, {}).get("city", DEFAULT_CITY)
    city_id = CITIES.get(city, DEFAULT_CITY_ID)
    bank_name = bank_mapping[message.text]
    position = user_data.get(user_id, {}).get("position", "–õ—é–±–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å")

    try:
        logger.info(f"–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π: {bank_name} –≤ {city}, –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {position}")
        await message.answer(f"üîç –ò—â—É –≤–∞–∫–∞–Ω—Å–∏–∏ {bank_name} –≤ {city}{f' –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ {position}' if position != '–õ—é–±–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å' else ''}...")

        if position == "–õ—é–±–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å":
            search_query = f'"{bank_name}"'
        else:
            synonyms = POSITION_SYNONYMS.get(position, [position.lower()])
            synonyms_query = " OR ".join([f'"{s}"' for s in synonyms])
            search_query = f'"{bank_name}" AND ({synonyms_query})'

        vacancies = get_hh_vacancies(search_query, city_id)

        if position != "–õ—é–±–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å":
            synonyms_lower = [s.lower() for s in synonyms]
            vacancies = [
                v for v in vacancies
                if any(syn in v.get('name', '').lower() for syn in synonyms_lower)
            ]

        report = generate_report(vacancies, bank_name, city, position)
        await message.answer(
            report,
            reply_markup=get_main_keyboard(),
            disable_web_page_preview=True
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π: {str(e)}", exc_info=True)
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.",
            reply_markup=get_main_keyboard()
        )


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("Starting bot...")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())