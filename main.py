import json
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from config import API_TOKEN
from parsers.hh_parser import get_hh_vacancies
from analytics import analyze_vacancy

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–Ω–∫–æ–≤
BANK_MAPPING = {
    "alfa": "–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫",
    "vtb": "–í–¢–ë",
    "rshb": "–†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫",
    "gazprom": "–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫", 
    "tinkoff": "–¢–∏–Ω—å–∫–æ—Ñ—Ñ"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ—Ä–æ–¥–æ–≤ (ID –∏–∑ API HeadHunter)
CITIES = {
    "–í–µ–ª–∏–∫–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥": 67,
    "–ú–æ—Å–∫–≤–∞": 1,
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": 2,
    "–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫": 14,
    "–í–æ–ª–æ–≥–¥–∞": 25,
    "–ü—Å–∫–æ–≤": 75,
    "–ú—É—Ä–º–∞–Ω—Å–∫": 64
}

DEFAULT_CITY = "–í–µ–ª–∏–∫–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥"
DEFAULT_CITY_ID = CITIES[DEFAULT_CITY]

SBER_BENCHMARK = {
    "salary_avg": 120000,
    "benefits": ["–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞", "–æ–±—É—á–µ–Ω–∏–µ", "–î–ú–°"],
    "tech_stack": ["Python", "SQL", "Kafka"]
}

# –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

def generate_report(vacancies: list, bank_name: str, city: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞"""
    if not vacancies:
        return (f"üòï –í {city} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è {bank_name}\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥")
    
    report = [f"üìä –û—Ç—á–µ—Ç –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º {bank_name} ({city}):\n"]
    
    for i, vacancy in enumerate(vacancies[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 5 –≤–∞–∫–∞–Ω—Å–∏–π
        try:
            analyzed = analyze_vacancy(vacancy, SBER_BENCHMARK)
            salary = format_salary(vacancy.get('salary'))
            salary_comparison = ""
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã
            if vacancy.get('salary') and vacancy['salary'].get('from'):
                salary_diff = vacancy['salary']['from'] - SBER_BENCHMARK['salary_avg']
                if salary_diff > 0:
                    salary_comparison = f"(üî∫ )"
                elif salary_diff < 0:
                    salary_comparison = f"(üîª )"
                else:
                    salary_comparison = "(‚âà –∫–∞–∫ –≤ –°–±–µ—Ä–µ)"
            
            report.append(
                f"\n{i}. üè¶ {analyzed.get('–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞', vacancy.get('employer', {}).get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))}\n"
                f"   üìå –î–æ–ª–∂–Ω–æ—Å—Ç—å: {vacancy.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                f"   üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {salary} {salary_comparison}\n"
                f"   ‚úîÔ∏è –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: {analyzed.get('–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞', '–ù–µ—Ç')}\n"
                f"   üéÅ –°–æ—Ü–ø–∞–∫–µ—Ç: {analyzed.get('–°–æ—Ü–ø–∞–∫–µ—Ç', '—Å–º. –≤ —É—Å–ª–æ–≤–∏—è—Ö')}\n"
                f"   üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å: {analyzed.get('–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å', '–°—Ä–µ–¥–Ω—è—è')}\n"
                f"   üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –°–±–µ—Ä–æ–º: {analyzed.get('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –°–±–µ—Ä–æ–º', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
                f"   üîó –°—Å—ã–ª–∫–∞: {vacancy.get('alternate_url', '–Ω–µ—Ç')}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–∏: {e}")
            continue
            
    return "\n".join(report)

def format_salary(salary: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—Ä–ø–ª–∞—Ç–µ"""
    if not salary:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    from_s = f"–æ—Ç {salary['from']}" if salary.get('from') else ""
    to_s = f"–¥–æ {salary['to']}" if salary.get('to') else ""
    currency = salary.get('currency', '').upper()
    return f"{from_s} {to_s} {currency}".strip()

def get_main_keyboard() -> ReplyKeyboardMarkup:
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –±–∞–Ω–∫–∞–º–∏"""
    builder = ReplyKeyboardBuilder()
    
    buttons = [
        "üè¶ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫",
        "üèõ –í–¢–ë",
        "üåæ –†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫",
        "‚õΩ –ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫",
        "üí≥ –¢–∏–Ω—å–∫–æ—Ñ—Ñ",
        "üåÜ –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥"
    ]
    
    for text in buttons:
        builder.add(KeyboardButton(text=text))
    
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_city_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞"""
    builder = ReplyKeyboardBuilder()
    
    for city in CITIES.keys():
        builder.add(KeyboardButton(text=city))
    
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

@dp.message(Command("start"))
async def start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    user_data[user_id] = {"city": DEFAULT_CITY}
    
    await message.answer(
        f"üåÜ –¢–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥: {DEFAULT_CITY}\n"
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–π:",
        reply_markup=get_main_keyboard()
    )

@dp.message(F.text == "üåÜ –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥")
async def change_city(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –≥–æ—Ä–æ–¥–∞"""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
        reply_markup=get_city_keyboard()
    )

@dp.message(F.text.in_(CITIES.keys()))
async def set_city(message: types.Message):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    user_id = message.from_user.id
    city = message.text
    user_data[user_id] = {"city": city}
    
    await message.answer(
        f"üåÜ –ì–æ—Ä–æ–¥ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {city}\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=get_main_keyboard()
    )

@dp.message(F.text.in_(["üè¶ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫", "üèõ –í–¢–ë", "üåæ –†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫", "‚õΩ –ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫", "üí≥ –¢–∏–Ω—å–∫–æ—Ñ—Ñ"]))
async def handle_bank_button(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –±–∞–Ω–∫–æ–≤"""
    bank_mapping = {
        "üè¶ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫": "–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫",
        "üèõ –í–¢–ë": "–í–¢–ë",
        "üåæ –†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫": "–†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫",
        "‚õΩ –ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫": "–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫",
        "üí≥ –¢–∏–Ω—å–∫–æ—Ñ—Ñ": "–¢–∏–Ω—å–∫–æ—Ñ—Ñ"
    }
    
    user_id = message.from_user.id
    city = user_data.get(user_id, {}).get("city", DEFAULT_CITY)
    city_id = CITIES.get(city, DEFAULT_CITY_ID)
    bank_name = bank_mapping[message.text]
    
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {bank_name} –≤ –≥–æ—Ä–æ–¥–µ {city} (ID: {city_id})")
        await message.answer(f"üîç –ò—â—É –≤–∞–∫–∞–Ω—Å–∏–∏ {bank_name} –≤ {city}...")
        
        # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º long-polling
        await bot.delete_webhook(drop_pending_updates=True)
        
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å - —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –±–∞–Ω–∫–∞
        vacancies = get_hh_vacancies(bank_name, city_id)
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ –æ–±—â–∏–π –∑–∞–ø—Ä–æ—Å
        if not vacancies:
            vacancies = get_hh_vacancies(bank_name.split()[0], city_id)
        
        # –ï—Å–ª–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –±–∞–Ω–∫–æ–≤ –≤–æ–æ–±—â–µ
        if not vacancies and bank_name != "–¢–∏–Ω—å–∫–æ—Ñ—Ñ":
            vacancies = get_hh_vacancies(f"{bank_name.split()[0]} –±–∞–Ω–∫", city_id)
        
        report = generate_report(vacancies, bank_name, city)
        await message.answer(
            report,
            reply_markup=get_main_keyboard(),
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∞–Ω–∫–∞ {bank_name}: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
            reply_markup=get_main_keyboard()
        )

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("Starting bot...")
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())