import json
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from config import API_TOKEN
from parsers.hh_parser import get_hh_vacancies
from analytics import analyze_vacancy

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

BANK_MAPPING = {
    "üè¶ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫": "–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫",
    "üèõ –í–¢–ë": "–í–¢–ë",
    "üåæ –†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫": "–†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫",
    "‚õΩ –ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫": "–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫",
    "üí≥ –¢–∏–Ω—å–∫–æ—Ñ—Ñ": "–¢–∏–Ω—å–∫–æ—Ñ—Ñ"
}

CITIES = {
    "–í–µ–ª–∏–∫–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥": 67,
    "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥": 41,
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": 2,
    "–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫": 14,
    "–í–æ–ª–æ–≥–¥–∞": 25,
    "–ü—Å–∫–æ–≤": 75,
    "–ö–æ–º–∏": 1041,
    "–ö–∞—Ä–µ–ª–∏—è": 1077,
    "–õ–µ–Ω. –æ–±–ª.": 145,
    "–ú—É—Ä–º–∞–Ω—Å–∫": 64
}

DEFAULT_CITY = "–í–µ–ª–∏–∫–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥"
DEFAULT_CITY_ID = CITIES[DEFAULT_CITY]

POSITIONS = ["–ú–µ–Ω–µ–¥–∂–µ—Ä", "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å", "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"]

SBER_BENCHMARK = {
    "salary_avg": 120000,
    "benefits": ["–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞", "–æ–±—É—á–µ–Ω–∏–µ", "–î–ú–°"],
    "tech_stack": ["Python", "SQL", "Kafka"]
}

user_data = {}

def format_salary(salary: dict) -> str:
    if not salary:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    from_s = f"–æ—Ç {salary['from']}" if salary.get('from') else ""
    to_s = f"–¥–æ {salary['to']}" if salary.get('to') else ""
    currency = salary.get('currency', '').upper()
    return f"{from_s} {to_s} {currency}".strip()

def generate_report(vacancies: list, bank_name: str, city: str) -> str:
    if not vacancies:
        return f"üòï –í {city} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è {bank_name}.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞."
    
    report = [f"üìä –û—Ç—á–µ—Ç –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º {bank_name} ({city}):\n"]
    
    for i, vacancy in enumerate(vacancies[:5], 1):
        try:
            analyzed = analyze_vacancy(vacancy, SBER_BENCHMARK)
            salary = format_salary(vacancy.get('salary'))
            salary_comparison = ""
            if vacancy.get('salary') and vacancy['salary'].get('from'):
                diff = vacancy['salary']['from'] - SBER_BENCHMARK['salary_avg']
                if diff > 0:
                    salary_comparison = "(üî∫)"
                elif diff < 0:
                    salary_comparison = "(üîª)"
                else:
                    salary_comparison = "(‚âà –∫–∞–∫ –≤ –°–±–µ—Ä–µ)"
            
            report.append(
                f"\n{i}. üè¶ {analyzed.get('–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞', vacancy.get('employer', {}).get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))}\n"
                f"   üìå –î–æ–ª–∂–Ω–æ—Å—Ç—å: {vacancy.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                f"   üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {salary} {salary_comparison}\n"
                f"   ‚úîÔ∏è –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: {analyzed.get('–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞', '–ù–µ—Ç')}\n"
                f"   üéÅ –°–æ—Ü–ø–∞–∫–µ—Ç: {analyzed.get('–°–æ—Ü–ø–∞–∫–µ—Ç', '—Å–º. –≤ —É—Å–ª–æ–≤–∏—è—Ö')}\n"
                f"   üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å: {analyzed.get('–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å', '–°—Ä–µ–¥–Ω—è—è')}\n"
                f"   üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –°–±–µ—Ä–æ–º: {analyzed.get('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –°–±–µ—Ä–æ–º', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
                f"   üîó –°—Å—ã–ª–∫–∞: {vacancy.get('alternate_url', '–Ω–µ—Ç')}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–∏: {e}")
            continue
    return "\n".join(report)

def get_city_keyboard() -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    for city in CITIES.keys():
        builder.add(KeyboardButton(text=city))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_position_keyboard() -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    for pos in POSITIONS:
        builder.add(KeyboardButton(text=pos))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_bank_keyboard() -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    for name in BANK_MAPPING.keys():
        builder.add(KeyboardButton(text=name))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id] = {}
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=get_city_keyboard())

@dp.message(F.text.in_(CITIES.keys()))
async def city_chosen(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id]["city"] = message.text
    await message.answer(f"–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: {message.text}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å:", reply_markup=get_position_keyboard())

@dp.message(F.text.in_(POSITIONS))
async def position_chosen(message: types.Message):
    user_id = message.from_user.id
    if message.text == "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤—Ä—É—á–Ω—É—é:")
        user_data[user_id]["awaiting_custom_position"] = True
    else:
        user_data[user_id]["position"] = message.text
        await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫:", reply_markup=get_bank_keyboard())

@dp.message()
async def handle_input(message: types.Message):
    user_id = message.from_user.id

    if user_data.get(user_id, {}).get("awaiting_custom_position"):
        user_data[user_id]["position"] = message.text
        user_data[user_id].pop("awaiting_custom_position")
        await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫:", reply_markup=get_bank_keyboard())
        return

    if message.text in BANK_MAPPING:
        city = user_data.get(user_id, {}).get("city", DEFAULT_CITY)
        city_id = CITIES.get(city, DEFAULT_CITY_ID)
        position = user_data.get(user_id, {}).get("position", "")
        bank_name = BANK_MAPPING[message.text]

        await message.answer(f"üîç –ò—â—É –≤–∞–∫–∞–Ω—Å–∏–∏ {bank_name} –≤ {city} –ø–æ –ø–æ–∑–∏—Ü–∏–∏ '{position}'...")
        await bot.delete_webhook(drop_pending_updates=True)

        try:
            vacancies = get_hh_vacancies(bank_name, city_id)
            if position:
                vacancies = [v for v in vacancies if position.lower() in v.get('name', '').lower()]

            report = generate_report(vacancies, bank_name, city)
            await message.answer(report, reply_markup=get_bank_keyboard(), disable_web_page_preview=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π: {e}")
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_city_keyboard())

async def main():
    logger.info("Starting bot...")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
