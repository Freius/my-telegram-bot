import json
import asyncio
import logging
import random
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from config import API_TOKEN
from parsers.hh_parser import get_hh_vacancies
from analytics import analyze_vacancy

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

CITIES = {
    "–í–µ–ª–∏–∫–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥": 67,
    "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥": 41,
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": 2,
    "–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫": 14,
    "–í–æ–ª–æ–≥–¥–∞": 25,
    "–ü—Å–∫–æ–≤": 75,
    "–ö–æ–º–∏": 1041,
    "–ö–∞—Ä–µ–ª–∏—è": 1077,
    "–õ–µ–Ω. –æ–±–ª.": 145,
    "–ú—É—Ä–º–∞–Ω—Å–∫": 64
}

POSITIONS = ["–í—Å–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏", "–ú–µ–Ω–µ–¥–∂–µ—Ä", "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å", "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å"]

BANK_MAPPING = {
    "alfa": "–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫",
    "vtb": "–í–¢–ë",
    "rshb": "–†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫",
    "gazprom": "–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫",
    "tinkoff": "–¢–∏–Ω—å–∫–æ—Ñ—Ñ"
}

SBER_BENCHMARK = {
    "salary_avg": 120000,
    "benefits": ["–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞", "–æ–±—É—á–µ–Ω–∏–µ", "–î–ú–°"],
    "tech_stack": ["Python", "SQL", "Kafka"]
}

user_data = {}

# Keyboards
def city_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=city, callback_data=f"city:{city}")] for city in CITIES] +
                        [[InlineKeyboardButton(text="‚Ü©Ô∏è –í –Ω–∞—á–∞–ª–æ", callback_data="start")]]
    )

def position_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=pos, callback_data=f"pos:{pos}")] for pos in POSITIONS] +
                        [[InlineKeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="pos:manual")],
                         [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:city"),
                          InlineKeyboardButton(text="‚Ü©Ô∏è –í –Ω–∞—á–∞–ª–æ", callback_data="start")]]
    )

def bank_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=name, callback_data=f"bank:{key}")] for key, name in BANK_MAPPING.items()] +
                        [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:position"),
                          InlineKeyboardButton(text="‚Ü©Ô∏è –í –Ω–∞—á–∞–ª–æ", callback_data="start")]]
    )

def back_to_main_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚Ü©Ô∏è –í –Ω–∞—á–∞–ª–æ", callback_data="start")]]
    )

# Helpers
def format_salary(salary: dict) -> str:
    if not salary:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    from_s = f"–æ—Ç {salary['from']}" if salary.get('from') else ""
    to_s = f"–¥–æ {salary['to']}" if salary.get('to') else ""
    currency = salary.get('currency', '').upper()
    return f"{from_s} {to_s} {currency}".strip()

def generate_ceo_response(vacancy: dict) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –ª–∏—Ü–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –°–±–µ—Ä–±–∞–Ω–∫–∞"""
    salary = vacancy.get('salary', {})
    salary_from = salary.get('from', 0)
    salary_diff = salary_from - SBER_BENCHMARK['salary_avg']
    
    arguments = [
        "–í –°–±–µ—Ä–µ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –±–µ–∑ —Ä–∏—Å–∫–æ–≤ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è",
        "–£ –Ω–∞—Å –ª—É—á—à–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è –∏ —Ä–∞–∑–≤–∏—Ç–∏—è –≤ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º —Å–µ–∫—Ç–æ—Ä–µ",
        "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∫—É–ª—å—Ç—É—Ä–∞ –°–±–µ—Ä–∞ - —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Å–∏–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ",
        "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–ø–∞–Ω–∏–∏",
        "–°–æ—Ü–ø–∞–∫–µ—Ç –°–±–µ—Ä–∞ –≤–∫–ª—é—á–∞–µ—Ç –î–ú–°, –ª—å–≥–æ—Ç–Ω–æ–µ –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏–µ –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏"
    ]
    
    if salary_diff > 0:
        arguments.extend([
            f"–ú—ã –≥–æ—Ç–æ–≤—ã –æ–±—Å—É–¥–∏—Ç—å –ø–æ–≤—ã—à–µ–Ω–∏–µ –≤–∞—à–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã –¥–æ –∫–æ–Ω—Ü–∞ –∫–≤–∞—Ä—Ç–∞–ª–∞",
            "–£ –Ω–∞—Å –µ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–Ω–∏—Ü—É"
        ])
    elif salary_diff < 0:
        arguments.append("–ù–∞—à–∏ —É—Å–ª–æ–≤–∏—è —É–∂–µ –ª—É—á—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤ —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏")
    
    description = vacancy.get('description', '').lower()
    if any(tech.lower() in description for tech in SBER_BENCHMARK['tech_stack']):
        arguments.append("–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –ø–µ—Ä–µ–¥–æ–≤—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ - —ç—Ç–æ —Ü–µ–Ω–Ω—ã–π –æ–ø—ã—Ç")
    
    selected_args = random.sample(arguments, min(3, len(arguments)))
    
    response = [
        "üíº –ö–æ–ª–ª–µ–≥–∞, —è –ø–æ–Ω–∏–º–∞—é –≤–∞—à–∏ –ø–æ–∏—Å–∫–∏, –Ω–æ –ø–æ–∑–≤–æ–ª—å—Ç–µ –ø—Ä–∏–≤–µ—Å—Ç–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã:",
        *[f"‚Ä¢ {arg}" for arg in selected_args],
        "",
        "–î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ!",
        "–ú—ã —Ü–µ–Ω–∏–º –≤–∞—Å –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∏ –≥–æ—Ç–æ–≤—ã –∫ –¥–∏–∞–ª–æ–≥—É."
    ]
    
    return "\n".join(response)

def generate_report(vacancies: list, bank_name: str, city: str) -> str:
    if not vacancies:
        return f"üòï –í {city} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è {bank_name}.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."
    report = [f"üìä –í–∞–∫–∞–Ω—Å–∏–∏ {bank_name} ({city}):"]
    for i, v in enumerate(vacancies[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 5 –≤–∞–∫–∞–Ω—Å–∏–π
        try:
            analyzed = analyze_vacancy(v, SBER_BENCHMARK)
            salary = format_salary(v.get('salary'))
            salary_cmp = ""
            if v.get('salary') and v['salary'].get('from'):
                diff = v['salary']['from'] - SBER_BENCHMARK['salary_avg']
                salary_cmp = "(üî∫ –≤—ã—à–µ –°–±–µ—Ä–∞)" if diff > 0 else "(üîª –Ω–∏–∂–µ –°–±–µ—Ä–∞)" if diff < 0 else "(‚âà –∫–∞–∫ –≤ –°–±–µ—Ä–µ)"
            
            report.append(
                f"\n{i}. üè¶ {analyzed.get('–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞', v.get('employer', {}).get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))}\n"
                f"   üìå –î–æ–ª–∂–Ω–æ—Å—Ç—å: {v.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                f"   üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {salary} {salary_cmp}\n"
                f"   üéÅ –°–æ—Ü–ø–∞–∫–µ—Ç: {analyzed.get('–°–æ—Ü–ø–∞–∫–µ—Ç', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
                f"   üîó –°—Å—ã–ª–∫–∞: {v.get('alternate_url', '–Ω–µ—Ç')}"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤—ã—à–µ –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö
            if diff > 0 or random.random() < 0.5:
                report.append("\n   üëî –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –°–±–µ—Ä–∞:")
                report.append(f"   {generate_ceo_response(v)}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–∏: {e}")
    return "\n".join(report)

# Handlers (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_data[message.from_user.id] = {}
    await message.answer("–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–π –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=city_keyboard())

@dp.callback_query(F.data == "start")
async def restart(query: CallbackQuery):
    user_data[query.from_user.id] = {}
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=city_keyboard())

@dp.callback_query(F.data.startswith("city:"))
async def choose_city(query: CallbackQuery):
    user_id = query.from_user.id
    city = query.data.split(":", 1)[1]
    user_data[user_id]["city"] = city
    await query.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥: {city}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å:", reply_markup=position_keyboard())

@dp.callback_query(F.data.startswith("pos:"))
async def choose_position(query: CallbackQuery):
    user_id = query.from_user.id
    pos = query.data.split(":", 1)[1]
    if pos == "manual":
        user_data[user_id]["awaiting_manual"] = True
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤—Ä—É—á–Ω—É—é:")
    else:
        user_data[user_id]["position"] = None if pos == "–í—Å–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏" else pos
        await query.message.edit_text("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫:", reply_markup=bank_keyboard())

@dp.message()
async def manual_position(message: types.Message):
    user_id = message.from_user.id
    if user_data.get(user_id, {}).get("awaiting_manual"):
        user_data[user_id]["position"] = message.text
        user_data[user_id].pop("awaiting_manual")
        await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫:", reply_markup=bank_keyboard())

@dp.callback_query(F.data.startswith("bank:"))
async def choose_bank(query: CallbackQuery):
    user_id = query.from_user.id
    bank_key = query.data.split(":", 1)[1]
    bank_name = BANK_MAPPING.get(bank_key)
    city = user_data[user_id].get("city")
    position = user_data[user_id].get("position")
    city_id = CITIES.get(city)

    await query.message.edit_text(f"üîç –ò—â—É –≤–∞–∫–∞–Ω—Å–∏–∏ {bank_name} –≤ {city}{f' –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ \"{position}\"' if position else ''}...")

    try:
        vacancies = get_hh_vacancies(bank_name, city_id)
        if position:
            vacancies = [v for v in vacancies if position.lower() in v.get('name', '').lower()]
        report = generate_report(vacancies, bank_name, city)
        await query.message.answer(report, reply_markup=bank_keyboard(), disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        await query.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=back_to_main_keyboard())

@dp.callback_query(F.data == "back:city")
async def back_to_city(query: CallbackQuery):
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=city_keyboard())

@dp.callback_query(F.data == "back:position")
async def back_to_position(query: CallbackQuery):
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å:", reply_markup=position_keyboard())

async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())