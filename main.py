import json
import asyncio
import logging
import random
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

from config import API_TOKEN
from parsers.hh_parser import get_hh_vacancies
from analytics import analyze_vacancy

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å FSM
storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=storage)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CITIES = {
    "–ú–æ—Å–∫–≤–∞": 1,
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": 2,
    "–í–µ–ª–∏–∫–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥": 67,
    "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥": 41,
    "–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫": 14,
    "–í–æ–ª–æ–≥–¥–∞": 25,
    "–ü—Å–∫–æ–≤": 75,
    "–ö–æ–º–∏": 1041,
    "–ö–∞—Ä–µ–ª–∏—è": 1077,
    "–õ–µ–Ω. –æ–±–ª.": 145,
    "–ú—É—Ä–º–∞–Ω—Å–∫": 64
}

POSITIONS = [
    "–í—Å–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏", 
    "–ú–µ–Ω–µ–¥–∂–µ—Ä", 
    "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", 
    "–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å", 
    "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å",
    "–ê–Ω–∞–ª–∏—Ç–∏–∫",
    "–ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
    "IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"
]

BANK_MAPPING = {
    "alfa": "–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫",
    "vtb": "–í–¢–ë", 
    "rshb": "–†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫",
    "gazprom": "–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫",
    "tinkoff": "–¢–∏–Ω—å–∫–æ—Ñ—Ñ",
    "raiffeisen": "–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω–±–∞–Ω–∫",
    "unicredit": "–Æ–Ω–∏–ö—Ä–µ–¥–∏—Ç –ë–∞–Ω–∫",
    "rosbank": "–†–æ—Å–±–∞–Ω–∫"
}

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –±–µ–Ω—á–º–∞—Ä–∫ –°–±–µ—Ä–±–∞–Ω–∫–∞
SBER_BENCHMARK = {
    "salary_ranges": {
        "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç": {"min": 80000, "max": 120000, "avg": 100000},
        "–ú–µ–Ω–µ–¥–∂–µ—Ä": {"min": 100000, "max": 150000, "avg": 125000},
        "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å": {"min": 150000, "max": 250000, "avg": 200000},
        "–ê–Ω–∞–ª–∏—Ç–∏–∫": {"min": 90000, "max": 140000, "avg": 115000},
        "default": {"min": 70000, "max": 130000, "avg": 100000}
    },
    "benefits": [
        "–î–ú–° –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞",
        "–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
        "–ª—å–≥–æ—Ç–Ω–æ–µ –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏–µ",
        "–ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–∑–≤–∏—Ç–∏—è –∫–∞—Ä—å–µ—Ä—ã",
        "–≥–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã",
        "–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–∫–∏–¥–∫–∏",
        "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–ø—É—Å–∫–∞",
        "—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"
    ],
    "tech_stack": ["Python", "SQL", "Kafka", "Docker", "Kubernetes", "Java", "React"],
    "corporate_values": [
        "—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∫—Ä—É–ø–Ω–µ–π—à–µ–≥–æ –±–∞–Ω–∫–∞ –†–æ—Å—Å–∏–∏",
        "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞", 
        "—Å–∏–ª—å–Ω–∞—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∫—É–ª—å—Ç—É—Ä–∞",
        "–ø–µ—Ä–µ–¥–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
        "—Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å"
    ]
}

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class BotStates(StatesGroup):
    waiting_manual_position = State()
    waiting_feedback = State()

# –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserSession:
    def __init__(self):
        self.city: Optional[str] = None
        self.city_id: Optional[int] = None
        self.position: Optional[str] = None
        self.bank: Optional[str] = None
        self.search_history: List[Dict] = []
        self.created_at = datetime.now()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions: Dict[int, UserSession] = {}

def get_user_session(user_id: int) -> UserSession:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_sessions:
        user_sessions[user_id] = UserSession()
    return user_sessions[user_id]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def city_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞"""
    buttons = []
    cities_list = list(CITIES.keys())
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≥–æ—Ä–æ–¥–∞ –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(cities_list), 2):
        row = []
        for j in range(2):
            if i + j < len(cities_list):
                city = cities_list[i + j]
                row.append(InlineKeyboardButton(
                    text=city, 
                    callback_data=f"city:{city}"
                ))
        buttons.append(row)
    
    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –í –Ω–∞—á–∞–ª–æ", callback_data="start")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def position_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
    buttons = []
    for pos in POSITIONS:
        buttons.append([InlineKeyboardButton(text=pos, callback_data=f"pos:{pos}")])
    
    buttons.extend([
        [InlineKeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="pos:manual")],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:city"),
            InlineKeyboardButton(text="‚Ü©Ô∏è –í –Ω–∞—á–∞–ª–æ", callback_data="start")
        ]
    ])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def bank_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –±–∞–Ω–∫–∞"""
    buttons = []
    banks_list = list(BANK_MAPPING.items())
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±–∞–Ω–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(banks_list), 2):
        row = []
        for j in range(2):
            if i + j < len(banks_list):
                key, name = banks_list[i + j]
                row.append(InlineKeyboardButton(
                    text=name, 
                    callback_data=f"bank:{key}"
                ))
        buttons.append(row)
    
    buttons.extend([
        [InlineKeyboardButton(text="üîç –°—Ä–∞–≤–Ω–∏—Ç—å –≤—Å–µ –±–∞–Ω–∫–∏", callback_data="bank:all")],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:position"),
            InlineKeyboardButton(text="‚Ü©Ô∏è –í –Ω–∞—á–∞–ª–æ", callback_data="start")
        ]
    ])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def action_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="start"),
            InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞", callback_data="history")
        ],
        [InlineKeyboardButton(text="üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="feedback")]
    ])

def back_to_main_keyboard() -> InlineKeyboardMarkup:
    """–ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Ü©Ô∏è –í –Ω–∞—á–∞–ª–æ", callback_data="start")]
    ])

# –£—Ç–∏–ª–∏—Ç—ã
def format_salary(salary: Optional[Dict]) -> Tuple[str, int]:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É –∏ –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"""
    if not salary:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–∞", 0
    
    from_val = salary.get('from', 0) or 0
    to_val = salary.get('to', 0) or 0
    currency = salary.get('currency', 'RUR').upper()
    
    if from_val and to_val:
        avg = (from_val + to_val) // 2
        return f"–æ—Ç {from_val:,} –¥–æ {to_val:,} {currency}", avg
    elif from_val:
        return f"–æ—Ç {from_val:,} {currency}", from_val
    elif to_val:
        return f"–¥–æ {to_val:,} {currency}", to_val
    else:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–∞", 0

def get_sber_benchmark_for_position(position: str) -> Dict:
    """–ü–æ–ª—É—á–∏—Ç—å –±–µ–Ω—á–º–∞—Ä–∫ –°–±–µ—Ä–±–∞–Ω–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
    position_key = None
    if position:
        for key in SBER_BENCHMARK["salary_ranges"]:
            if key.lower() in position.lower():
                position_key = key
                break
    
    return SBER_BENCHMARK["salary_ranges"].get(position_key, 
                                               SBER_BENCHMARK["salary_ranges"]["default"])

def analyze_market_position(vacancies: List[Dict], position: str) -> Dict:
    """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
    if not vacancies:
        return {}
    
    salaries = []
    for v in vacancies:
        _, avg_salary = format_salary(v.get('salary'))
        if avg_salary > 0:
            salaries.append(avg_salary)
    
    if not salaries:
        return {"message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—Ä–ø–ª–∞—Ç–∞—Ö"}
    
    market_avg = sum(salaries) // len(salaries)
    market_min = min(salaries)
    market_max = max(salaries)
    
    sber_benchmark = get_sber_benchmark_for_position(position)
    sber_avg = sber_benchmark["avg"]
    
    return {
        "market_avg": market_avg,
        "market_min": market_min,
        "market_max": market_max,
        "sber_avg": sber_avg,
        "sber_vs_market": sber_avg - market_avg,
        "sber_position": "–≤—ã—à–µ" if sber_avg > market_avg else "–Ω–∏–∂–µ" if sber_avg < market_avg else "–Ω–∞ —É—Ä–æ–≤–Ω–µ"
    }

def generate_ceo_response(vacancy: Dict, market_analysis: Dict, position: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ª–∏—Ü–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –°–±–µ—Ä–±–∞–Ω–∫–∞"""
    employer_name = vacancy.get('employer', {}).get('name', '–±–∞–Ω–∫-–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç')
    vacancy_name = vacancy.get('name', '–¥–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è')
    
    _, vacancy_salary = format_salary(vacancy.get('salary'))
    sber_benchmark = get_sber_benchmark_for_position(position)
    sber_avg = sber_benchmark["avg"]
    
    # –ë–∞–∑–æ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    base_arguments = [
        f"üèõÔ∏è –°–±–µ—Ä–±–∞–Ω–∫ ‚Äî –∫—Ä—É–ø–Ω–µ–π—à–∏–π –±–∞–Ω–∫ –†–æ—Å—Å–∏–∏ —Å 180-–ª–µ—Ç–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏",
        f"üìà –ú—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ–º –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –±–æ–ª—å—à–µ –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ –±–∞–Ω–∫–∞",
        f"üéØ –£ –Ω–∞—Å —á–µ—Ç–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –∏ KPI",
        f"üõ°Ô∏è –°–æ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç –°–±–µ—Ä–±–∞–Ω–∫–∞ –ø—Ä–∏–∑–Ω–∞–Ω –ª—É—á—à–∏–º –≤ –æ—Ç—Ä–∞—Å–ª–∏"
    ]
    
    # –ê—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ
    salary_arguments = []
    if vacancy_salary > 0:
        salary_diff = vacancy_salary - sber_avg
        if salary_diff > 10000:
            salary_arguments.extend([
                f"üí∞ –ì–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å –ø–æ–≤—ã—à–µ–Ω–∏–µ –≤–∞—à–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã –Ω–∞ {min(salary_diff, 30000):,} —Ä—É–±–ª–µ–π",
                f"üéÅ –ü–ª—é—Å –±–æ–Ω—É—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –¥–æ 20% –∫ –æ–∫–ª–∞–¥—É"
            ])
        elif salary_diff > 0:
            salary_arguments.append(f"üí∞ –ù–∞—à–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞ —É–∂–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞, –ø–ª—é—Å —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã")
        else:
            salary_arguments.append(f"üí∞ –ù–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä—ã–Ω–æ–∫ –Ω–∞ {abs(salary_diff):,} —Ä—É–±–ª–µ–π")
    
    # –ê—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é
    development_arguments = [
        f"üéì –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –°–±–µ—Ä–±–∞–Ω–∫–∞ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è –º–∏—Ä–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è",
        f"üåç –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –∏ –æ–±–º–µ–Ω –æ–ø—ã—Ç–æ–º",
        f"ü§ñ –†–∞–±–æ—Ç–∞ —Å cutting-edge —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏: AI, blockchain, big data"
    ]
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –±–∞–Ω–∫–æ–≤
    competitor_arguments = []
    employer_lower = employer_name.lower()
    if "–∞–ª—å—Ñ–∞" in employer_lower:
        competitor_arguments.append("üîí –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç —á–∞—Å—Ç–Ω—ã—Ö –±–∞–Ω–∫–æ–≤, —É –Ω–∞—Å –≥–æ—Å–≥–∞—Ä–∞–Ω—Ç–∏–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏")
    elif "–≤—Ç–±" in employer_lower:
        competitor_arguments.append("üìä –ú—ã –ª–∏–¥–µ—Ä—ã –≤ digital-—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞")
    elif "—Ç–∏–Ω—å–∫–æ—Ñ—Ñ" in employer_lower:
        competitor_arguments.append("üè¢ –£ –Ω–∞—Å –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –∫–∞—Ä—å–µ—Ä—ã –≤ –æ—Ñ–ª–∞–π–Ω-—Å–µ–≥–º–µ–Ω—Ç–µ")
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    all_arguments = base_arguments + salary_arguments + development_arguments + competitor_arguments
    selected_args = random.sample(all_arguments, min(4, len(all_arguments)))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response_parts = [
        f"üëã –ö–æ–ª–ª–µ–≥–∞, –ø–æ–Ω–∏–º–∞—é –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø–æ–∑–∏—Ü–∏–∏ '{vacancy_name}' –≤ {employer_name}.",
        f"",
        f"–ù–æ –ø–æ–∑–≤–æ–ª—å—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç—ã:",
        ""
    ]
    
    for i, arg in enumerate(selected_args, 1):
        response_parts.append(f"{i}. {arg}")
    
    response_parts.extend([
        "",
        f"üíº –ü—Ä–µ–¥–ª–∞–≥–∞—é –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≤–∞—à–∏—Ö –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤.",
        f"–£–≤–µ—Ä–µ–Ω, –º—ã –Ω–∞–π–¥–µ–º —Ä–µ—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–µ–≤–∑–æ–π–¥–µ—Ç –ª—é–±—ã–µ –≤–Ω–µ—à–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!",
        "",
        f"–° —É–≤–∞–∂–µ–Ω–∏–µ–º,",
        f"–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –°–±–µ—Ä–±–∞–Ω–∫–∞ üèõÔ∏è"
    ])
    
    return "\n".join(response_parts)

def generate_detailed_report(vacancies: List[Dict], bank_name: str, city: str, position: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º"""
    if not vacancies:
        return f"üòï –í –≥–æ—Ä–æ–¥–µ {city} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π {bank_name}" + \
               (f" –ø–æ –ø–æ–∑–∏—Ü–∏–∏ '{position}'" if position else "") + \
               ".\n\nüîç –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥\n‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å\n‚Ä¢ –ü–æ–∏—Å–∫–∞—Ç—å –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö"
    
    # –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
    market_analysis = analyze_market_position(vacancies, position)
    
    report_parts = [
        f"üìä **–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç: {bank_name}**",
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {city}",
        f"üëî –ü–æ–∑–∏—Ü–∏—è: {position or '–í—Å–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏'}",
        f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
        f"",
        f"üìà **–†—ã–Ω–æ—á–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:**"
    ]
    
    if market_analysis and "message" not in market_analysis:
        sber_position = market_analysis["sber_position"]
        diff = abs(market_analysis["sber_vs_market"])
        report_parts.extend([
            f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –Ω–∞ —Ä—ã–Ω–∫–µ: {market_analysis['market_avg']:,} —Ä—É–±.",
            f"‚Ä¢ –í–∏–ª–∫–∞: –æ—Ç {market_analysis['market_min']:,} –¥–æ {market_analysis['market_max']:,} —Ä—É–±.",
            f"‚Ä¢ –ü–æ–∑–∏—Ü–∏—è –°–±–µ—Ä–±–∞–Ω–∫–∞: {sber_position} —Ä—ã–Ω–∫–∞ –Ω–∞ {diff:,} —Ä—É–±.",
            f""
        ])
    
    report_parts.append(f"üíº **–ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ ({len(vacancies)}):**")
    report_parts.append("")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 7 –≤–∞–∫–∞–Ω—Å–∏–π
    for i, vacancy in enumerate(vacancies[:7], 1):
        try:
            employer = vacancy.get('employer', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            name = vacancy.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            salary_str, salary_avg = format_salary(vacancy.get('salary'))
            url = vacancy.get('alternate_url', '')
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –°–±–µ—Ä–±–∞–Ω–∫–æ–º
            sber_benchmark = get_sber_benchmark_for_position(position)
            if salary_avg > 0:
                diff = salary_avg - sber_benchmark["avg"]
                if diff > 5000:
                    salary_comparison = f"(üî∫ –Ω–∞ {diff:,} –≤—ã—à–µ –°–±–µ—Ä–∞)"
                elif diff < -5000:
                    salary_comparison = f"(üîª –Ω–∞ {abs(diff):,} –Ω–∏–∂–µ –°–±–µ—Ä–∞)"
                else:
                    salary_comparison = "(‚âà –Ω–∞ —É—Ä–æ–≤–Ω–µ –°–±–µ—Ä–∞)"
            else:
                salary_comparison = ""
            
            report_parts.extend([
                f"**{i}. {employer}**",
                f"   üìå {name}",
                f"   üí∞ {salary_str} {salary_comparison}",
                f"   üîó [–û—Ç–∫—Ä—ã—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é]({url})" if url else "   üîó –°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                ""
            ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
            if (salary_avg > sber_benchmark["avg"] + 10000 or 
                random.random() < 0.3):  # 30% —à–∞–Ω—Å –¥–ª—è –ª—é–±–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
                
                ceo_response = generate_ceo_response(vacancy, market_analysis, position)
                report_parts.extend([
                    "   üì¢ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –°–±–µ—Ä–±–∞–Ω–∫–∞:**",
                    "",
                    "   " + ceo_response.replace("\n", "\n   "),
                    "",
                    "   " + "‚îÄ" * 50,
                    ""
                ])
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏: {e}")
            continue
    
    if len(vacancies) > 7:
        report_parts.append(f"... –∏ –µ—â–µ {len(vacancies) - 7} –≤–∞–∫–∞–Ω—Å–∏–π")
    
    return "\n".join(report_parts)

def save_search_to_history(user_id: int, city: str, position: str, bank: str, results_count: int):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    session = get_user_session(user_id)
    search_record = {
        "timestamp": datetime.now().isoformat(),
        "city": city,
        "position": position,
        "bank": bank,
        "results_count": results_count
    }
    session.search_history.append(search_record)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 –ø–æ–∏—Å–∫–∞–º–∏
    if len(session.search_history) > 10:
        session.search_history = session.search_history[-10:]

def format_search_history(user_id: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    session = get_user_session(user_id)
    if not session.search_history:
        return "üìù –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–∞"
    
    history_parts = ["üìö **–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞:**", ""]
    
    for i, record in enumerate(reversed(session.search_history[-5:]), 1):
        timestamp = datetime.fromisoformat(record["timestamp"])
        formatted_time = timestamp.strftime("%d.%m %H:%M")
        
        history_parts.append(
            f"{i}. **{formatted_time}** - {record['bank']} –≤ {record['city']}\n"
            f"   –ü–æ–∑–∏—Ü–∏—è: {record['position'] or '–í—Å–µ'} | –ù–∞–π–¥–µ–Ω–æ: {record['results_count']} –≤–∞–∫."
        )
    
    return "\n".join(history_parts)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    user_id = message.from_user.id
    session = get_user_session(user_id)
    session.__init__()  # –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏
    
    welcome_text = (
        "üèõÔ∏è **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HR-–∞–Ω–∞–ª–∏—Ç–∏–∫—É –°–±–µ—Ä–±–∞–Ω–∫–∞!**\n\n"
        "–Ø –ø–æ–º–æ–≥—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –±–∞–Ω–∫–æ–≤-–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å "
        "–∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏—è —Ü–µ–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.\n\n"
        "üìä –ß—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –≥–æ—Ä–æ–¥–∞–º –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º\n"
        "‚Ä¢ –°—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –°–±–µ—Ä–±–∞–Ω–∫–∞\n"
        "‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞\n"
        "‚Ä¢ –ü—Ä–æ–≤–æ–¥–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É\n\n"
        "üéØ –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:"
    )
    
    await message.answer(welcome_text, reply_markup=city_keyboard(), parse_mode="Markdown")

@dp.callback_query(F.data == "start")
async def restart(query: CallbackQuery):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    user_id = query.from_user.id
    session = get_user_session(user_id)
    session.__init__()
    
    await query.message.edit_text(
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–π:",
        reply_markup=city_keyboard()
    )

@dp.callback_query(F.data.startswith("city:"))
async def choose_city(query: CallbackQuery):
    """–í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞"""
    user_id = query.from_user.id
    city = query.data.split(":", 1)[1]
    
    session = get_user_session(user_id)
    session.city = city
    session.city_id = CITIES.get(city)
    
    await query.message.edit_text(
        f"üèôÔ∏è –í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: **{city}**\n\n"
        f"üëî –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=position_keyboard(),
        parse_mode="Markdown"
    )

@dp.callback_query(F.data.startswith("pos:"))
async def choose_position(query: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
    user_id = query.from_user.id
    pos = query.data.split(":", 1)[1]
    
    if pos == "manual":
        await state.set_state(BotStates.waiting_manual_position)
        await query.message.edit_text(
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é:\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ö—Ä–µ–¥–∏—Ç–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫', 'Senior Java Developer', '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º'"
        )
    else:
        session = get_user_session(user_id)
        session.position = None if pos == "–í—Å–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏" else pos
        
        position_text = pos if pos != "–í—Å–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏" else "–≤—Å–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"
        await query.message.edit_text(
            f"üëî –í—ã–±—Ä–∞–Ω–∞ –ø–æ–∑–∏—Ü–∏—è: **{position_text}**\n\n"
            f"üè¶ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            reply_markup=bank_keyboard(),
            parse_mode="Markdown"
        )

@dp.message(BotStates.waiting_manual_position)
async def manual_position(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
    user_id = message.from_user.id
    position = message.text.strip()
    
    if len(position) < 2:
        await message.answer("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    session = get_user_session(user_id)
    session.position = position
    
    await state.clear()
    await message.answer(
        f"üëî –£–∫–∞–∑–∞–Ω–∞ –ø–æ–∑–∏—Ü–∏—è: **{position}**\n\n"
        f"üè¶ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=bank_keyboard(),
        parse_mode="Markdown"
    )

@dp.callback_query(F.data.startswith("bank:"))
async def choose_bank(query: CallbackQuery):
    """–í—ã–±–æ—Ä –±–∞–Ω–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞"""
    user_id = query.from_user.id
    bank_key = query.data.split(":", 1)[1]
    
    session = get_user_session(user_id)
    
    if bank_key == "all":
        # –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –±–∞–Ω–∫–æ–≤
        await query.message.edit_text(
            f"üîç **–ó–∞–ø—É—Å–∫–∞—é —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –±–∞–Ω–∫–æ–≤...**\n\n"
            f"üìç –ì–æ—Ä–æ–¥: {session.city}\n"
            f"üëî –î–æ–ª–∂–Ω–æ—Å—Ç—å: {session.position or '–í—Å–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏'}\n\n"
            f"‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è..."
        )
        
        all_results = []
        for bank_key, bank_name in BANK_MAPPING.items():
            try:
                vacancies = get_hh_vacancies(bank_name, session.city_id)
                if session.position:
                    vacancies = [v for v in vacancies 
                               if session.position.lower() in v.get('name', '').lower()]
                all_results.extend([(bank_name, v) for v in vacancies])
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π {bank_name}: {e}")
        
        if all_results:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –±–∞–Ω–∫–∞–º –∏ —Å–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
            bank_summary = {}
            for bank_name, vacancy in all_results:
                if bank_name not in bank_summary:
                    bank_summary[bank_name] = []
                bank_summary[bank_name].append(vacancy)
            
            summary_parts = [
                f"üìä **–°–≤–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –≤—Å–µ–º –±–∞–Ω–∫–∞–º**",
                f"üèôÔ∏è –ì–æ—Ä–æ–¥: {session.city}",
                f"üëî –ü–æ–∑–∏—Ü–∏—è: {session.position or '–í—Å–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏'}",
                f""
            ]
            
            for bank_name, vacancies in bank_summary.items():
                market_analysis = analyze_market_position(vacancies, session.position)
                avg_salary = market_analysis.get('market_avg', 0) if market_analysis else 0
                
                summary_parts.append(
                    f"üè¶ **{bank_name}**: {len(vacancies)} –≤–∞–∫., "
                    f"—Å—Ä–µ–¥–Ω—è—è –ó–ü: {avg_salary:,} —Ä—É–±." if avg_salary > 0 else f"{len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π"
                )
            
            await query.message.edit_text(
                "\n".join(summary_parts),
                reply_markup=action_keyboard(),
                parse_mode="Markdown"
            )
            
            save_search_to_history(user_id, session.city, session.position, "–í—Å–µ –±–∞–Ω–∫–∏", len(all_results))
        else:
            await query.message.edit_text(
                "üòï –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –≤–æ –≤—Å–µ—Ö –±–∞–Ω–∫–∞—Ö.",
                reply_markup=action_keyboard()
            )
    else:
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–∞–Ω–∫–∞
        bank_name = BANK_MAPPING.get(bank_key)
        session.bank = bank_name
        
        await query.message.edit_text(
            f"üîç **–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞–∫–∞–Ω—Å–∏–∏ {bank_name}...**\n\n"
            f"üìç –ì–æ—Ä–æ–¥: {session.city}\n"
            f"üëî –î–æ–ª–∂–Ω–æ—Å—Ç—å: {session.position or '–í—Å–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏'}\n\n"
            f"‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ —Å HeadHunter..."
        )
        
        try:
            vacancies = get_hh_vacancies(bank_name, session.city_id)
            if session.position:
                vacancies = [v for v in vacancies 
                           if session.position.lower() in v.get('name', '').lower()]